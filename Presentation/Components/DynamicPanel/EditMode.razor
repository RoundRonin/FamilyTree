@using FamilyTreeBlazor.BLL.DTOs
@using FamilyTreeBlazor.presentation.Models
@using FamilyTreeBlazor.presentation.Infrastructure
@using FamilyTreeBlazor.presentation.Controllers.Interfaces;
@inject IAppStateService AppState
@inject IPersonController PersonController

<h3>Edit mode: @Text</h3>

<MudForm @ref="form" @bind-IsValid="@success">
    <MudTextField @bind-Value=@name Label="Enter name" Variant="Variant.Text" Required="true"
        RequiredError="Name is required!"></MudTextField>

    <MudDatePicker Label="Enter birthday" Editable="true" @bind-Date=@dateTime Mask="@(new DateMask("MM/dd/yyyy"))"
        DateFormat="MM/dd/yyyy" Placeholder="en-US Date" MaxDate=@DateTime.Today MinDate=@(new DateTime(1900, 1, 1))
        Required="true" RequiredError="Birth date is required!" />

    <div class="radio">
        <MudRadioGroup @bind-Value=@sex Required="true" RequiredError="Sex is required!">
            <MudRadio Value="true" Color="Color.Primary" Dense="true">Male</MudRadio>
            <MudRadio Value="false" Color="Color.Secondary" Dense="false">Female</MudRadio>
        </MudRadioGroup>
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddPerson()">Add person</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="() => Cancel()">Cancel</MudButton>
</MudForm>


@code {
    [Parameter]
    public string Text { get; set; } = "Default";

    string? name = null;
    DateTime? dateTime = null;
    bool sex = true;

    MudForm form;
    bool success;

    public void AddPerson()
    {
        form.Validate();
        if (!success) return;
        if (dateTime == null)
        {
            Console.WriteLine("DateTime in EditMode panel is null");
            return;
        }
        if (name == null)
        {
            Console.WriteLine("DateTime in EditMode panel is null");
            return;
        }
        PersonController.AddPerson(name, dateTime.Value, sex);
    }

    public void Cancel()
    {
        AppState.GetSpecificState<EditToolState>().State = EditState.Initial;
    }
}
